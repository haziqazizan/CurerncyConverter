/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package currencyconverterproject;

import java.awt.print.PrinterException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author haziq
 */
public class TransferConverter extends javax.swing.JFrame {

    /**
     * Creates new form Converter
     */
    
    public TransferConverter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jAbout = new javax.swing.JButton();
        Jconvert = new javax.swing.JButton();
        jLocation = new javax.swing.JButton();
        jLogout = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jtxtAmount = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jAccount = new javax.swing.JTextField();
        jCombotype = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboFrom = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboTo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jReceipt = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 255, 204));
        setBounds(new java.awt.Rectangle(500, 150, 0, 0));
        setName("frameTransfer"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("HAF Currency Converter");

        jAbout.setBackground(new java.awt.Color(204, 204, 255));
        jAbout.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        jAbout.setText("About");
        jAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutActionPerformed(evt);
            }
        });

        Jconvert.setBackground(new java.awt.Color(204, 204, 255));
        Jconvert.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        Jconvert.setText("Convert");
        Jconvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JconvertActionPerformed(evt);
            }
        });

        jLocation.setBackground(new java.awt.Color(204, 204, 255));
        jLocation.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        jLocation.setText("Transfer");
        jLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLocationActionPerformed(evt);
            }
        });

        jLogout.setBackground(new java.awt.Color(204, 204, 255));
        jLogout.setFont(new java.awt.Font("Book Antiqua", 1, 14)); // NOI18N
        jLogout.setText("Logout");
        jLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogoutActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel7.setText("Amount             :");

        jtxtAmount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jtxtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtAmountActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel10.setText("Account Number  :");

        jAccount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jCombotype.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jCombotype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fund Transfer to Savings / Current", "Credit Card Payment", " " }));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Transfer To          :");

        jComboFrom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jComboFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MYR", "SGD", "LAK", "PHP", "IDR", "BND", "THB", "VND", "KHR", "MMK" }));

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("From           :");

        jComboTo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jComboTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SGD", "LAK", "PHP", "IDR", "BND", "THB", "VND", "KHR", "MMK", "MYR" }));

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel9.setText("To                 :");

        jReceipt.setBackground(new java.awt.Color(204, 204, 255));
        jReceipt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jReceipt.setText("Generate Receipt");
        jReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReceiptActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton1.setText("Transfer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jClear.setBackground(new java.awt.Color(255, 102, 102));
        jClear.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jClear.setText("Clear");
        jClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearActionPerformed(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        jPrint.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jPrint.setText("Print");
        jPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jAbout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Jconvert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLocation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLogout))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jReceipt)
                                .addGap(26, 26, 26)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jClear)))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jAccount)
                            .addComponent(jtxtAmount))
                        .addGap(99, 99, 99))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCombotype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(99, 99, 99))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboTo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Jconvert)
                    .addComponent(jAbout)
                    .addComponent(jLocation)
                    .addComponent(jLogout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtxtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCombotype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jClear)
                    .addComponent(jReceipt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPrint)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutActionPerformed
          new AboutConverter().setVisible(true);
          super.dispose();
    }//GEN-LAST:event_jAboutActionPerformed

    private void JconvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JconvertActionPerformed
          new ConvertConverter().setVisible(true);
          super.dispose();
    }//GEN-LAST:event_JconvertActionPerformed

    private void jLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLocationActionPerformed
        new TransferConverter().setVisible(true);
        super.dispose();
    }//GEN-LAST:event_jLocationActionPerformed

    private void jLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogoutActionPerformed
        new LoginConverter().setVisible(true);
        super.dispose();
    }//GEN-LAST:event_jLogoutActionPerformed

    private void jClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearActionPerformed
         jtxtAmount.setText("");
        jAccount.setText("");
    }//GEN-LAST:event_jClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          
        try{
        float convert=0 ;
        float amount = Float.parseFloat(jtxtAmount.getText());
        String fromcountry = jComboFrom.getSelectedItem().toString();
        String tocountry = jComboTo.getSelectedItem().toString();
        float acc = Float.parseFloat(jAccount.getText());
        
       if(isNumberValid(amount,acc)){
        switch(fromcountry){
              case"MYR" : MYRConvert(tocountry,fromcountry,convert,amount);
            break;
            case"BND" : BNDConvert(tocountry,fromcountry,convert,amount);
            break;
            case"SGD" : SGDConvert(tocountry,fromcountry,convert,amount);
            break;
            case"VND" : VNDConvert(tocountry,fromcountry,convert,amount);
            break;
            case"MMK" : MMKConvert(tocountry,fromcountry,convert,amount);
            break;
            case"IDR" : IDRConvert(tocountry,fromcountry,convert,amount);
            break;
            case"LAK" : LAKConvert(tocountry,fromcountry,convert,amount);
            break;
            case"KHR" : KHRConvert(tocountry,fromcountry,convert,amount);
            break;
            case"PHP" : PHPConvert(tocountry,fromcountry,convert,amount);
            break;
            case"THB" : THBConvert(tocountry,fromcountry,convert,amount);
            break;
        }}}
        catch(NumberFormatException ex){
         JOptionPane.showMessageDialog(null,"Please Enter Number value ");
        }  catch (NegativeValue ex) {
            JOptionPane.showMessageDialog(null,"Please enter the positive value only");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReceiptActionPerformed
        float amount = Float.parseFloat(jtxtAmount.getText());
        String fromcountry = jComboFrom.getSelectedItem().toString();
        String Type = jCombotype.getSelectedItem().toString();
        String tocountry = jComboTo.getSelectedItem().toString();
        String acc = jAccount.getText();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
        LocalDateTime now = LocalDateTime.now();
                
        TextArea.setText("************* Transfer Receipt  *************\n");
        TextArea.setText(TextArea.getText()+"\nAmount      : " + jtxtAmount.getText() +" "+fromcountry+"\n");
        TextArea.setText(TextArea.getText()+"\nTransfer to : " + Type+"\n");
        TextArea.setText(TextArea.getText()+"\nAccount to  : " + acc+"\n"); 
        TextArea.setText(TextArea.getText()+"\nDate        : " + now +"\n");
        TextArea.setText(TextArea.getText()+"\n                          SUCCESSFULL");
    }//GEN-LAST:event_jReceiptActionPerformed

    private void jPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrintActionPerformed
        try {
            TextArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(TransferConverter.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jPrintActionPerformed

    private void jtxtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtAmountActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransferConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransferConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransferConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransferConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransferConverter().setVisible(true);
            }
        });
    }

    private void MYRConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {  
        try{
        if("MYR".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.31); 
        }
        else if("MYR".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float) (amount * 0.32);
        }
        else if("MYR".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float)(amount * 422.53);
        }
        else if("MYR".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 3320.26);
        }
        else if("MYR".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 5297.44);
        }
         else if("MYR".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 927.38);
        }
          else if("MYR".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 3069.48);
        }
          else if("MYR".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 11.95);
        }
          else if("MYR".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 7.80);
        }
      JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        }
    }
  
  private void PHPConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
         if("PHP".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.084); 
        }
        else if("PHP".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.026);
        }
        else if("PHP".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.026);
        }
        else if("PHP".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float) (amount * 35.36);
        }
         else if("PHP".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 277.87);
        }
         else if("PHP".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 0.31);
        }
          else if("PHP".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 443.34);
        }
          else if("PHP".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 257.05);
        }
          else if("PHP".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.65);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        }
    }
  
  private void THBConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
         if("THB".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.13); 
        }
        else if("THB".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.040);
        }
        else if("THB".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.040);
        }
        else if("THB".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float) (amount * 54.29);
        }
         else if("THB".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 426.63);
        }
         else if("THB".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 119.16);
        }
          else if("THB".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 680.68);
        }
          else if("THB".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 394.66);
        }
          else if("THB".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 1.54);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        } 
    }
  
  private void BNDConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
        if("BND".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 3.20); 
        }
        else if("BND".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float) (amount * 1.00);
        }
        else if("BND".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float)(amount * 1351.87);
        }
        else if("BND".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 10622.99);
        }
         else if("BND".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 16948.90);
        }
         else if("BND".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 2967.11);
        }
          else if("BND".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 9827.04);
        }
          else if("BND".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 38.23);
        }
          else if("BND".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 24.90);
        }
       JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        }  
    }
  
  private void SGDConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
        if("SGD".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 3.19); 
        }
        else if("SGD".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 1.00);
        }
        else if("SGD".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float)(amount * 1346.14);
        }
        else if("SGD".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 10577.96);
        }
         else if("SGD".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 16877.05);
        }
         else if("SGD".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 2954.53);
        }
          else if("SGD".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 9785.38);
        }
          else if("SGD".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 38.07);
        }
          else if("SGD".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 24.79);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        } 
    }
  
  private void LAKConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
         if("LAK".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.00033); 
        }
        else if("LAK".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.00010);
        }
        else if("LAK".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.00010);
        }
        else if("LAK".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float) (amount * 0.14);
        }
         else if("LAK".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 1.10);
        }
         else if("LAK".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 0.31);
        }
          else if("LAK".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 1.75);
        }
          else if("LAK".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 0.0039);
        }
          else if("LAK".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.0026);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        } 
    }
  
    private void MMKConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
       if("MMK".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.0024); 
        }
        else if("MMK".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.00074);
        }
        else if("MMK".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.00074);
        }
        else if("MMK".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 7.86);
        }
         else if("MMK".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 12.54);
        }
         else if("MMK".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 2.20);
        }
          else if("MMK".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 7.27);
        }
          else if("MMK".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 0.028);
        }
          else if("MMK".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.018);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        } 
    }
    private void IDRConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
         if("IDR".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.00030); 
        }
        else if("IDR".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.000094);
        }
        else if("IDR".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.000095);
        }
        else if("IDR".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float) (amount * 0.13);
        }
         else if("IDR".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 1.60);
        }
         else if("IDR".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 0.28);
        }
          else if("IDR".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 0.93);
        }
          else if("IDR".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 0.0036);
        }
          else if("IDR".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.0023);
        }
        JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        }
    }
    
      private void VNDConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {
        try{
         if("VND".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.00019); 
        }
        else if("VND".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.000059);
        }
        else if("VND".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float)(amount * 0.000059);
        }
        else if("VND".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float) (amount * 0.080);
        }
         else if("VND".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 0.63);
        }
         else if("VND".equals(fromcountry) && "KHR".equals(tocountry)){
         convert = (float) (amount * 0.18);
        }
          else if("VND".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 0.58);
        }
          else if("VND".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 0.0023);
        }
          else if("VND".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.0015);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        } 
    }
      
      private void KHRConvert(String tocountry,String fromcountry,float convert,float amount) throws NumberFormatException
    {  
        try{
        if("KHR".equals(fromcountry) && "BND".equals(tocountry)){
         convert = (float) (amount * 0.00034); 
        }
        else if("KHR".equals(fromcountry) && "SGD".equals(tocountry)){
         convert = (float) (amount * 0.00034);
        }
        else if("KHR".equals(fromcountry) && "MMK".equals(tocountry)){
         convert = (float)(amount * 0.46);
        }
        else if("KHR".equals(fromcountry) && "IDR".equals(tocountry)){
         convert = (float) (amount * 3.58);
        }
        else if("KHR".equals(fromcountry) && "VND".equals(tocountry)){
         convert = (float) (amount * 5.72);
        }
         else if("KHR".equals(fromcountry) && "MYR".equals(tocountry)){
         convert = (float) (amount * 0.0011);
        }
          else if("KHR".equals(fromcountry) && "LAK".equals(tocountry)){
         convert = (float) (amount * 3.31);
        }
          else if("KHR".equals(fromcountry) && "PHP".equals(tocountry)){
         convert = (float) (amount * 0.013);
        }
          else if("KHR".equals(fromcountry) && "THB".equals(tocountry)){
         convert = (float) (amount * 0.0084);
        }
         JOptionPane.showMessageDialog(null, amount +" " + fromcountry +" = "+ String.valueOf(convert)+" " +tocountry + "\n has been Successfully transferred to \n account number : " +jAccount.getText());
      }
      catch(NumberFormatException e){
         JOptionPane.showMessageDialog(null,"Invalid Input");
        }
    }
    
    
       private static boolean isNumberValid(float amount,float acc) 
            throws NegativeValue ,ArithmeticException{
        
     if(amount <= 0 || acc<= 0){
     throw new NegativeValue ();   
     }
       else{
     return true
             ;}
       }
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Jconvert;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JButton jAbout;
    private javax.swing.JTextField jAccount;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jClear;
    private javax.swing.JComboBox<String> jComboFrom;
    private javax.swing.JComboBox<String> jComboTo;
    private javax.swing.JComboBox<String> jCombotype;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jLocation;
    private javax.swing.JButton jLogout;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jPrint;
    private javax.swing.JButton jReceipt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtxtAmount;
    // End of variables declaration//GEN-END:variables
}
